FROM debian:jessie

RUN apt-get update && apt-get install -y --no-install-recommends \
        autoconf \
        bison \
        bzip2 \
        ca-certificates \
        file \
        flex \
        g++ \
        gawk \
        gettext \
        gcc \
        git \
        perl \
        texinfo \
        wget \
        xz-utils \
     && rm -rf /var/cache/apt/archives /var/lib/apt/lists

ARG NPROCS
#include "env.docker"

// get make 3.82

WORKDIR /src
RUN wget -q "ftp://ftp.gnu.org/gnu/make/make-3.82.tar.bz2" \
 && tar xpf make-3.82.tar.bz2 \
 && cd make-3.82 \
 && ./configure --prefix=/usr \
 && ./build.sh \
 && ./make install \
 && cd .. \
 && rm -rf make-3.82 make-3.82.tar.bz2

// get sources

WORKDIR /src

RUN wget -q "ftp://www.kernel.org/pub/linux/kernel/v3.x/${LINUX_VERSION}.tar.xz"
RUN wget -q "ftp://ftp.gnu.org/gnu/gmp/${GMP_VERSION}.tar.bz2"
RUN wget -q "ftp://ftp.gnu.org/gnu/mpfr/${MPFR_VERSION}.tar.gz"
RUN wget -q "ftp://ftp.gnu.org/gnu/mpc/${MPC_VERSION}.tar.gz"
RUN wget -q "ftp://ftp.gnu.org/gnu/glibc/${GLIBC_VERSION}.tar.gz"
RUN git clone -b ${CHROMIUM_VERSION} --depth 1 "https://chromium.googlesource.com/chromiumos/third_party/gcc" ${GCC_VERSION}
RUN git clone -b ${CHROMIUM_VERSION} --depth 1 "https://chromium.googlesource.com/chromiumos/third_party/binutils" ${BINUTILS_VERSION}
RUN wget -q "ftp://gcc.gnu.org/pub/gcc/infrastructure/${ISL_VERSION}.tar.bz2"
RUN wget -q "ftp://gcc.gnu.org/pub/gcc/infrastructure/${CLOOG_VERSION}.tar.gz"

RUN for f in *.tar*; do tar xfk $f; done

RUN cd /src/${GCC_VERSION} \
        && ln -s ../${GMP_VERSION} gmp \
        && ln -s ../${MPFR_VERSION} mpfr \
        && ln -s ../${MPC_VERSION} mpc \
        && ln -s ../${ISL_VERSION} isl \
        && ln -s ../${CLOOG_VERSION} cloog

// cross

ENV PATH ${CROS_HOST_PREFIX}/bin:$PATH

WORKDIR /src/${LINUX_VERSION}
RUN make mrproper && make ARCH=${CROS_KERNEL_ARCH} INSTALL_HDR_PATH=${CROS_HOST_PREFIX}/${CROS_TARGET} headers_install

WORKDIR /build/binutils
RUN /src/${BINUTILS_VERSION}/configure \
        --prefix=${CROS_HOST_PREFIX} \
        --build=${CROS_HOST} \
        --host=${CROS_HOST} \
        --target=${CROS_TARGET} \
        ${CROS_CROSS_GCC_OPT} \
        && make -j ${CROS_CORES} \
        && make install

WORKDIR /build/gcc
RUN /src/${GCC_VERSION}/configure \
        --prefix=${CROS_HOST_PREFIX} \
        --build=${CROS_HOST} \
        --host=${CROS_HOST} \
        --target=${CROS_TARGET} \
        --enable-languages=c,c++ \
        ${CROS_CROSS_GCC_OPT} \
        && make -j ${CROS_CORES} all-gcc \
        && make install-gcc

WORKDIR /build/glibc
RUN /src/${GLIBC_VERSION}/configure \
        --prefix=${CROS_HOST_PREFIX}/${CROS_TARGET} \
        --build=${CROS_HOST} \
        --host=${CROS_TARGET} \
        --target=${CROS_TARGET} \
        --with-headers=${CROS_HOST_PREFIX}/${CROS_TARGET}/include \
        ${CROS_CROSS_LIBC_OPT} \
        && make install-bootstrap-headers=yes install-headers \
        && make -j ${CROS_CORES} csu/subdir_lib \
        && install csu/crt1.o csu/crti.o csu/crtn.o ${CROS_HOST_PREFIX}/${CROS_TARGET}/lib \
        && ${CROS_TARGET}-gcc -nostdlib -nostartfiles -shared -x c /dev/null -o ${CROS_HOST_PREFIX}/${CROS_TARGET}/lib/libc.so \
        && touch ${CROS_HOST_PREFIX}/${CROS_TARGET}/include/gnu/stubs.h

WORKDIR /build/gcc
RUN make -j ${CROS_CORES} all-target-libgcc && make install-target-libgcc

WORKDIR /build/glibc
RUN make -j ${CROS_CORES} && make install

WORKDIR /build/gcc
RUN make -j ${CROS_CORES} all && make install

WORKDIR /
RUN rm -rf /src
RUN rm -rf /build

